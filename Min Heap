#include<iostream>
using namespace std;

class MINHeap {
protected:
	int* arr;
	int size;
public:
	MINHeap(int s) {
		arr = new int[s+1];
		size = s+1;
	}
	~MINHeap() {
		delete[] arr;
	}
	virtual void insert(int val) = 0;
	virtual int remove() = 0;
	virtual void display() = 0;	
};

class MyminHeap : public MINHeap {
public:
	MyminHeap(int s) : MINHeap(s) {
		arr[0] = 1; // Initialize the first element to 1, indicating the next index to be used
	}
	void insert(int val) {
		if (arr[0] >= size) {
			cout << "Heap is full" << endl;
			return;
		}
		arr[arr[0]] = val;
		heapifyup(arr[0]);
		arr[0]++;
	}
	int remove() {
		if (arr[0] <= 1) {
			cout << "Heap is empty" << endl;
			return -1; // Indicating heap is empty
		}
		int returnValue = arr[1];
		arr[0]--;
		arr[1] = arr[arr[0]];
		if(arr[0]>1)
		heapifydown(1);
		return returnValue;
	}
	void heapifyup(int i) {
		int child = i;
		int parent = i / 2;
		while (parent >= 1 && arr[parent] > arr[child]) {
			swap(arr[parent], arr[child]);
			child = parent;
			parent = child / 2;
		}
	}
	void heapifydown(int i) {
		int parent = i;
		
		while (2 * parent < arr[0]) {
			int Lchild = 2 * parent;
			int Rchild = 2 * parent + 1;
			int smallest = Lchild;

			if (Rchild < arr[0] && arr[Rchild] < arr[Lchild]) {
				smallest = Rchild;
			}

			if (arr[parent] <= arr[smallest])
				break;

			swap(arr[parent], arr[smallest]);
			parent = smallest;
		}

	}
	void display() {
		for (int i = 1; i < arr[0]; i++) {
			cout << arr[i] << " ";
		}
		cout << endl;
	}
};
