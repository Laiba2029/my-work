#include<iostream>
using namespace std;
template <typename T>
class AbstractStack {
protected:
	T* arr;
	int currentSize;
	int maxSize;
public:
	AbstractStack(int size);
	virtual void push(T value) = 0;
	virtual T pop() = 0;
	virtual T top() = 0;
	virtual bool isEmpty() const = 0;
	virtual bool isFull() const = 0;
	virtual ~AbstractStack();
};

template <typename T>
AbstractStack<T>::AbstractStack(int size) {
	arr = new T[size];
	maxSize = size;
	currentSize = 0;
}
template <typename T>
AbstractStack<T>::~AbstractStack() {
	delete[] arr;
}


template <typename T>
class MyStack : public AbstractStack<T>
{
public:
	MyStack(int size);
	void push(T value);
	T pop();
	T top();
	bool isEmpty() const;
	bool isFull() const;
	void display();
	T getMin() ;
};
template <typename T>
MyStack<T>::MyStack(int size) :AbstractStack<T>(size) {}


template <typename T>
void MyStack<T>::push(T value) {
	if (!isFull()) {
		AbstractStack<T>::arr[AbstractStack<T>::currentSize] = value;
		AbstractStack<T>::currentSize++;
	}
	else {
		cout << "Queue is full." << endl;
	}
}

template <typename T>
T MyStack<T>::pop() {
	if (!isEmpty())
		return AbstractStack<T>::arr[--AbstractStack<T>::currentSize];
	else {
		cout << "Queue is empty." << endl;
	}
}

template <typename T>
T MyStack<T>::top() {
	if (!isEmpty()) {
		return AbstractStack<T>::arr[AbstractStack<T>::currentSize-1];
		
	}
	else {
		cout << "Queue is empty." << endl;
	}
}

template <typename T>
bool MyStack<T>::isEmpty() const {
	if (AbstractStack<T>::currentSize == 0)
		return true;
	return false;
}

template <typename T>
bool MyStack<T>::isFull() const {
	if (AbstractStack<T>::currentSize == AbstractStack<T>::maxSize)
		return true;
	return false;
}

template <typename T>
void MyStack<T>::display() {
	cout << "Max Size: " << AbstractStack<T>::maxSize << endl;
	cout << "Current Size: " << AbstractStack<T>::currentSize << endl;
	for (int i = 0; i < AbstractStack<T>::currentSize; i++) {
		cout << i << ". " << AbstractStack<T>::arr[i] << endl;
	}
}

template <typename T>
T MyStack<T>::getMin()  {
	T minValue=0, value;
	MyStack<T> temp(AbstractStack<T>::currentSize);
	minValue = pop();
	for (int i = 1; i < AbstractStack<T>::currentSize; i++) {
		value = pop();
		if (value < minValue) {
			minValue = value;
		}
		else {
			temp.push(value);
		}
	}
	return minValue;
}

using namespace std;
struct node {
    int x;  //row
    int y;  //column
};

int main() {
    ifstream fin("input.txt");
    ofstream fout("output.txt");
    int size = 0;

    if (!fin.is_open()) {
        cout << "File not found." << endl;
        return 0;
    }
    string line;
    while (getline(fin, line)) {
        size++;
    }

    fin.close(); 


    fin.open("input.txt");
    int** maze = new int* [size];
    int** solution = new int* [size];
    for (int i = 0; i < size; i++) {
        maze[i] = new int[size];
        solution[i] = new int[size] {0};  
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            int temp;
            fin >> temp;
            maze[i][j] = temp;
        }
    }

    //random count of maximum moves
    int temp = size * size;
    int Stacksize = temp * size;

    MyStack<node> path(Stacksize);
    node start = { 0,0 };
    path.push(start);
    maze[0][0] = -1;    //mark visited
    solution[0][0] = 1; //can be used in path
    bool pathFound = false;
    while (!path.isEmpty()) {
        node current = path.top();
        
        if (current.x == size-1 && current.y == size-1)//if end of maze is reached
        {
            pathFound = true;
            break;
        }

        bool move = false;
        //move forward
        if (current.y + 1 >= 0 && current.y + 1 < size && maze[current.x][current.y + 1] == 1) {
            node next = { current.x,current.y + 1 };
            maze[current.x][current.y + 1] = -1;
            solution[current.x][current.y + 1] = 1;
            path.push(next);
            move = true;
        }
        //move downward
        else if (current.x + 1 >= 0 && current.x + 1 < size && maze[current.x+1][current.y] == 1) {
            node next = { current.x + 1 ,current.y };
            maze[current.x + 1][current.y ] = -1;
            solution[current.x + 1][current.y ] = 1;
            path.push(next);
            move = true;
        }
        //move backward
        else if (current.y - 1 >= 0 && current.y - 1 < size && maze[current.x][current.y - 1] == 1) {
            node next = { current.x,current.y - 1 };
            maze[current.x][current.y - 1] = -1;
            solution[current.x][current.y - 1] = 1;
            path.push(next);
            move = true;
        }
        //move upward
        else if (current.x - 1 >= 0 && current.x - 1 < size && maze[current.x - 1][current.y] == 1) {
            node next = { current.x - 1 ,current.y };
            maze[current.x - 1][current.y] = -1;
            solution[current.x - 1][current.y] = 1;
            path.push(next);
            move = true;
        }
        if (!move) //if not movement is done
        {
            maze[current.x ][current.y] = -1;
            solution[current.x ][current.y] = 0;
            path.pop();
        }
    }
    if (pathFound) {
        for (int i = 0;i < size;i++) {
            for (int j = 0;j < size;j++)
                fout<< solution[i][j]<<" ";
            fout << endl;
        }
    }
    else {
        fout << "path not found." << endl;
    }
    fin.close();
    fout.close();
    for (int i = 0; i < size; i++) {
        delete[] maze[i];
        delete[] solution[i];
    }
    delete[] maze;
    delete[] solution;
    maze = nullptr;
    solution = nullptr;

    return 0;
}
